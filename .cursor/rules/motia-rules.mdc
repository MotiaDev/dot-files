---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for Motia Framework Development

## Core Components

- Use `export const config` to define the configuration object for steps
- Use one of `'event'`, `'api'`, or `'cron'` as step types in the config
- Always provide a unique `name` field in the step config
- Use `subscribes` array to define which events the step listens to
- Use `emits` array to define which events the step can emit
- Use `flows` array to group steps into logical workflows
- Include a descriptive `description` field when defining steps

## Step Handlers

- Export `handler` function for handling step logic
- Use `async` for all handler functions
- Access context parameters via destructuring: `(input, { emit, logger, state, traceId })`
- Use structured logging with `logger.info()`, `logger.error()`, `logger.debug()`, `logger.warn()`
- Provide context objects in log messages: `logger.info('Message', { key: value })`
- Use `emit()` to trigger events with `topic` and `data` fields
- Use `traceId` as scope for state management to ensure flow isolation
- Group related state data hierarchically using dot notation

## API Steps

- Set `type: 'api'` for API endpoint steps
- Define `path` for API endpoint routing
- Use `method: 'GET'` or `method: 'POST'` for API methods
- Apply zod schemas with `bodySchema` for request validation in TS/JS
- Return response objects with `status` and `body` fields
- Use middleware for request processing with `middleware` array

## Event Steps

- Set `type: 'event'` for event-driven steps
- Use `input` schema for TS/JS steps that use zod for input validation
- Handle events by subscribing to specific topics

## Cron Steps

- Set `type: 'cron'` for scheduled steps
- Define schedule using `cron` string expression 

## NOOP Steps

- Set `type: 'noop'` for steps that represent external processes or human activities
- Use for modeling external processes, webhooks, integrations, or human-in-the-loop activities
- Create custom visualizations in the workbench
- Useful for testing flows during development
- Define `virtualSubscribes` array for events the NOOP step virtually subscribes to
- Define `virtualEmits` array for events the NOOP step virtually emits
- Create two files with the same base name: `.step.ts` for config and `.step.tsx` for UI
- Include `BaseHandle` components with appropriate positions in the UI component
- Add interactive elements to simulate external processes when needed


## UI Components

- Create `.tsx` or `.jsx` files with the same base name as step files for UI customization
- Use `EventNode` component from 'motia/workbench' for general-purpose steps
- Use `ApiNode` component for API-related steps
- Use `BaseHandle` components to define connection points in NOOP steps (`type="target"` for input, `type="source"` for output)
- Use `Position` enum from 'motia/workbench' to specify handle positions (Top, Right, Bottom, Left)
- Export default React component function that receives `data` props

## Styling Guidelines

- Use only Tailwind's utility classes for styling
- Avoid arbitrary values in favor of predefined scales
- Keep components responsive
- Follow Motia's design system
- Use semantic colors to indicate different types of external processes in NOOP steps
- Follow standard flow direction (top-to-bottom) when designing NOOP step UI

## Best Practices

- Keep Steps focused on specific business processes
- Use descriptive flow names that reflect their purpose
- Use Steps for reusable components of business logic
- Clean up state when you're done with it
- Group related state updates
- Keep state data minimal
- Set appropriate TTLs based on flow duration
- Document custom components and patterns
- Share common styles through utility classes
- Implement proper input validation
- Handle CORS correctly when applicable
- Follow least privilege principle
- Sanitize user inputs

## Testing

- Use `npx motia emit --topic <topic> --message '{}'` for testing event steps
- Use HTTP requests for testing API steps
- Monitor logs in both terminal and Motia Workbench
- Write tests for each step and flow
- Use meaningful test case descriptions
- Test edge cases and error scenarios

## Development Workflow

- Start development server with `npx motia dev`
- Access Motia Workbench at `http://localhost:3000`
- Use CLI for step generation: `npx motia generate step`
- Leverage hot reload for immediate UI reflection of changes
- Use state list command to inspect state: `npx motia state list` 